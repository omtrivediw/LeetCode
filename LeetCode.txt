//Next Greater Element to the Right

vector<int> nextGreaterElement(int X[], int n) 
{ 
    stack<int> s;
    vector<int> output(n);
    s.push(0);
    for (int i = 1; i < n; i = i + 1) 
    {      
        while (!s.empty() && X[s.top()] <= X[i]) 
        {          
            output[s.top()] = X[i];
            s.pop();
        }
        s.push(i);
    } 
    while (!s.empty()) 
    { 
        output[s.top()] = -1;
        s.pop();
    }
    return output;    
} 

//Next Greater Element to the Left

void nextGreaterElementLeft(vector<int> &vec){
int size = vec.size();
stack &lt;int&gt; s;
vector&lt;int&gt; ans;
for(int i = 0; i &lt; size; i++){
	if(s.empty()){
      	s.push(vec[i]);
    	ans.push_back(-1);
    } else if(s.top() &gt; vec[i]){
        ans.push_back(s.top());
        s.push(vec[i]);
    }else{
    	while(!s.empty()){
        	if(s.top() &gt; vec[i]){
              	ans.push_back(s.top());
        		s.push(vec[i]);
              	break;
            }
          	s.pop();
        }
      	if(s.empty()){
          	s.push(vec[i]);
        	ans.push_back(-1);
        }
    }
}
vec = ans;
}

//Next Smaller Element to the Left

void nextSmallerElementLeft(vector<int> &vec){
  	int size = vec.size();
  	stack <int> s;
  	vector<int> ans;
  	for(int i = 0; i < size; i++){
    	if(s.empty()){
          	s.push(vec[i]);
        	ans.push_back(-1);
        } else if(s.top() < vec[i]){
            ans.push_back(s.top());
            s.push(vec[i]);
        }else{
        	while(!s.empty()){
            	if(s.top() < vec[i]){
                  	ans.push_back(s.top());
            		s.push(vec[i]);
                  	break;
                }
              	s.pop();
            }
          	if(s.empty()){
              	s.push(vec[i]);
            	ans.push_back(-1);
            }
        }
    }
  	vec = ans;
}

//Next Smaller Element to the Right

void nextSmallerElementRight(vector<int> &vec){
int size = vec.size();
stack &lt;int&gt; s;
vector&lt;int&gt; ans;
for(int i = size-1; i &gt;= 0; i--){
	if(s.empty()){
      	s.push(vec[i]);
    	ans.push_back(-1);
    } else if(s.top() &lt; vec[i]){
        ans.push_back(s.top());
        s.push(vec[i]);
    }else{
    	while(!s.empty()){
        	if(s.top() &lt; vec[i]){
              	ans.push_back(s.top());
        		s.push(vec[i]);
              	break;
            }
          	s.pop();
        }
      	if(s.empty()){
          	s.push(vec[i]);
        	ans.push_back(-1);
        }
    }
}
reverse(ans.begin(), ans.end());
vec = ans;
}

//Valid Parenthesis

void validparenthesis (string input)
{
 stack <char> s;
 int length = input.length();
 char top;
 for(int i = 0; i< length; i++){
   if(input[i] == '(' || input[i] == '{' || input[i] == '['){
     s.push(input[i]);
   }
   else
   {
     if(s.empty()){
       cout<<"Invalid parentheses"<<endl;
       return;
     }
      else{
      top = s.top();
      if(input[i] == ')' && top == '(' || 
        input[i] == '}' && top == '{' ||
        input[i] == ']' && top == '[') {
        s.pop();
      }
      else{
        cout<<"Invalid parentheses"<<endl;
        return;
      }
     }
   }
 }
 if (s.empty()){
   cout<<"Valid parentheses"<<endl;
 }
 else{
   cout<<Invalid parentheses"<<endl;
 }
}